import * as THREE from 'three';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';

const gltfLoader = new GLTFLoader();

// === H·ªÜ TR·ª§C T·ªåA ƒê·ªò CHU·∫®N CHO NH·∫™N ===
const STANDARDIZED_RING_AXES = [
    { dir: new THREE.Vector3(1, 0, 0), color: '#ff0000', text: 'X' }, // ƒê·ªè - Ngang ng√≥n tay
    { dir: new THREE.Vector3(0, 1, 0), color: '#00ff00', text: 'Y' }, // Xanh L√° - D·ªçc ng√≥n tay (qua l·ªó nh·∫´n)
    { dir: new THREE.Vector3(0, 0, 1), color: '#0000ff', text: 'Z' }  // Xanh D∆∞∆°ng - Kim c∆∞∆°ng v·ªÅ mu b√†n tay
];

const createLabeledAxes = (length, axesConfig, lineWidth = 2) => {
    const axesGroup = new THREE.Group();

    const createLabel = (text, color, position) => {
        const canvas = document.createElement('canvas');
        const size = 128;
        canvas.width = size;
        canvas.height = size;
        const context = canvas.getContext('2d');
        context.fillStyle = color;
        context.font = `bold ${size * 0.7}px Arial`;
        context.textAlign = 'center';
        context.textBaseline = 'middle';
        context.fillText(text, size / 2, size / 2);

        const texture = new THREE.CanvasTexture(canvas);
        const spriteMaterial = new THREE.SpriteMaterial({
            map: texture,
            transparent: true,
            depthTest: false
        });
        const sprite = new THREE.Sprite(spriteMaterial);
        sprite.scale.set(0.5, 0.5, 1.0);
        sprite.position.copy(position);
        sprite.renderOrder = 999;
        return sprite;
    };

    axesConfig.forEach(axis => {
        const material = new THREE.LineBasicMaterial({
            color: axis.color,
            linewidth: lineWidth,
            depthTest: false
        });
        const points = [new THREE.Vector3(0, 0, 0), axis.dir.clone().multiplyScalar(length)];
        const geometry = new THREE.BufferGeometry().setFromPoints(points);
        const line = new THREE.Line(geometry, material);
        line.renderOrder = 999;

        const labelPosition = points[1].clone().multiplyScalar(1.2);
        const label = createLabel(axis.text, axis.color, labelPosition);

        axesGroup.add(line);
        axesGroup.add(label);
    });

    return axesGroup;
};

/**
 * Ph√¢n t√≠ch v√† x√°c ƒë·ªãnh h∆∞·ªõng hi·ªán t·∫°i c·ªßa m√¥ h√¨nh nh·∫´n
 */
const analyzeRingOrientation = (model) => {
    const box = new THREE.Box3().setFromObject(model);
    const size = box.getSize(new THREE.Vector3());
    const center = box.getCenter(new THREE.Vector3());

    console.log('üìä Ph√¢n t√≠ch m√¥ h√¨nh g·ªëc:');
    console.log('üìè K√≠ch th∆∞·ªõc:', { width: size.x.toFixed(3), height: size.y.toFixed(3), depth: size.z.toFixed(3) });
    console.log('üìç T√¢m:', { x: center.x.toFixed(3), y: center.y.toFixed(3), z: center.z.toFixed(3) });

    // X√°c ƒë·ªãnh tr·ª•c ch√≠nh d·ª±a tr√™n k√≠ch th∆∞·ªõc
    const maxDimension = Math.max(size.x, size.y, size.z);
    const minDimension = Math.min(size.x, size.y, size.z);

    console.log('üéØ Tr·ª•c ch√≠nh (l·ªõn nh·∫•t):', maxDimension === size.x ? 'X' : maxDimension === size.y ? 'Y' : 'Z');
    console.log('üéØ Tr·ª•c m·ªèng nh·∫•t:', minDimension === size.x ? 'X' : minDimension === size.y ? 'Y' : 'Z');

    return { size, center, maxDimension, minDimension };
};

/**
 * Chu·∫©n h√≥a h·ªá tr·ª•c t·ªça ƒë·ªô nh·∫´n theo finger coordinate system
 */
const standardizeRingCoordinates = (model) => {
    console.log('üîÑ ƒêang chu·∫©n h√≥a h·ªá tr·ª•c t·ªça ƒë·ªô nh·∫´n...');

    // Ph√¢n t√≠ch m√¥ h√¨nh g·ªëc
    const analysis = analyzeRingOrientation(model);

    // CƒÉn gi·ªØa m√¥ h√¨nh v·ªÅ g·ªëc t·ªça ƒë·ªô
    model.position.sub(analysis.center);

    // === X√ÅC ƒê·ªäNH H∆Ø·ªöNG C·ª¶A NH·∫™N ===
    // Gi·∫£ ƒë·ªãnh: Nh·∫´n ƒë∆∞·ª£c thi·∫øt k·∫ø v·ªõi kim c∆∞∆°ng ·ªü m·ªôt ƒë·∫ßu c·ª• th·ªÉ

    // Reset rotation ƒë·ªÉ b·∫Øt ƒë·∫ßu t·ª´ ƒë·∫ßu
    model.rotation.set(0, 0, 0);

    // === ROTATION MATRIX ƒê·ªÇ CHU·∫®N H√ìA ===
    // M·ª•c ti√™u: ƒê∆∞a nh·∫´n v·ªÅ h·ªá tr·ª•c chu·∫©n
    // - Y-axis: Qua l·ªó nh·∫´n (d·ªçc ng√≥n tay)
    // - Z-axis: Kim c∆∞∆°ng h∆∞·ªõng ra ngo√†i (v·ªÅ mu b√†n tay)  
    // - X-axis: Ngang nh·∫´n (vu√¥ng g√≥c v·ªõi Y v√† Z)

    // B∆Ø·ªöC 1: Xoay ƒë·ªÉ l·ªó nh·∫´n th·∫≥ng h√†ng v·ªõi Y-axis
    // Th∆∞·ªùng nh·∫´n .glb c√≥ l·ªó theo Z-axis ban ƒë·∫ßu
    model.rotation.x = THREE.MathUtils.degToRad(28);

    // B∆Ø·ªöC 2: Xoay ƒë·ªÉ kim c∆∞∆°ng h∆∞·ªõng ƒë√∫ng v·ªÅ Z+ (mu b√†n tay)
    // C·∫ßn test ƒë·ªÉ x√°c ƒë·ªãnh h∆∞·ªõng ch√≠nh x√°c
    // model.rotation.y = Math.PI; // 180¬∞ n·∫øu kim c∆∞∆°ng b·ªã ng∆∞·ª£c

    // B∆Ø·ªöC 3: Fine-tuning ƒë·ªÉ nh·∫´n n·∫±m ƒë√∫ng v·ªã tr√≠
    // model.rotation.z = 0; // ƒêi·ªÅu ch·ªânh n·∫øu c·∫ßn

    console.log('‚úÖ H·ªá tr·ª•c nh·∫´n ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a:');
    console.log('üìç Y-axis (GREEN): Qua l·ªó nh·∫´n - t∆∞∆°ng ·ª©ng fingerY (d·ªçc ng√≥n tay)');
    console.log('üìç Z-axis (BLUE): Kim c∆∞∆°ng v·ªÅ mu b√†n tay - t∆∞∆°ng ·ª©ng fingerZ');
    console.log('üìç X-axis (RED): Ngang nh·∫´n - t∆∞∆°ng ·ª©ng fingerX');

    return model;
};

/**
 * T·∫£i v√† chu·∫©n h√≥a m√¥ h√¨nh nh·∫´n v·ªõi h·ªá tr·ª•c t·ªça ƒë·ªô chu·∫©n
 */
export const modelLoader3 = (url) => {
    return new Promise((resolve, reject) => {
        gltfLoader.load(
            url,
            (gltf) => {
                console.log('üì¶ ƒê√£ t·∫£i m√¥ h√¨nh nh·∫´n th√†nh c√¥ng');

                const model = gltf.scene;

                // === T·∫†O CONTAINER ===
                const container = new THREE.Group();
                container.name = 'RingContainer';

                // === CHU·∫®N H√ìA H·ªÜ TR·ª§C T·ªåA ƒê·ªò ===
                const standardizedModel = standardizeRingCoordinates(model);
                container.add(standardizedModel);

                // === C·∫§U H√åNH MATERIAL ===
                model.traverse((child) => {
                    if (child.isMesh) {
                        child.castShadow = true;
                        child.receiveShadow = true;
                    }
                });

                // === TH√äM TR·ª§C T·ªåA ƒê·ªò DEBUG ===
                const debugAxes = createLabeledAxes(1.5, STANDARDIZED_RING_AXES, 3);
                debugAxes.name = 'DebugAxes';
                container.add(debugAxes);

                // === X√ÅC NH·∫¨N K·∫æT QU·∫¢ ===
                console.log('üéØ Container s·∫µn s√†ng cho finger tracking');
                console.log('‚úÖ H·ªá tr·ª•c nh·∫´n = H·ªá tr·ª•c ng√≥n tay');
                console.log('üîó Mapping: Ring.X=Finger.X, Ring.Y=Finger.Y, Ring.Z=Finger.Z');

                resolve(container);
            },

            // Progress callback
            (progress) => {
                const percent = (progress.loaded / progress.total * 100).toFixed(0);
                console.log(`üì• ƒêang t·∫£i: ${percent}%`);
            },

            // Error callback
            (error) => {
                console.error('‚ùå L·ªói t·∫£i m√¥ h√¨nh:', error);
                reject(error);
            }
        );
    });
};

/**
 * H√†m ti·ªán √≠ch ƒë·ªÉ toggle hi·ªÉn th·ªã debug axes
 */
export const toggleDebugAxes = (container, visible = true) => {
    const debugAxes = container.getObjectByName('DebugAxes');
    if (debugAxes) {
        debugAxes.visible = visible;
        console.log(`üîß Debug axes: ${visible ? 'Hi·ªÉn th·ªã' : '·∫®n'}`);
    }
};

/**
 * H√†m ki·ªÉm tra v√† validate h·ªá tr·ª•c t·ªça ƒë·ªô
 */
export const validateRingAxes = (container) => {
    console.log('üîç Ki·ªÉm tra h·ªá tr·ª•c t·ªça ƒë·ªô nh·∫´n...');

    const model = container.children.find(child => child.name !== 'DebugAxes');
    if (model) {
        const currentRotation = {
            x: THREE.MathUtils.radToDeg(model.rotation.x).toFixed(1),
            y: THREE.MathUtils.radToDeg(model.rotation.y).toFixed(1),
            z: THREE.MathUtils.radToDeg(model.rotation.z).toFixed(1)
        };

        console.log('üìê Rotation hi·ªán t·∫°i:', currentRotation);

        // Ki·ªÉm tra bounding box sau khi chu·∫©n h√≥a
        const box = new THREE.Box3().setFromObject(model);
        const size = box.getSize(new THREE.Vector3());

        console.log('üìè K√≠ch th∆∞·ªõc sau chu·∫©n h√≥a:', {
            x: size.x.toFixed(3),
            y: size.y.toFixed(3),
            z: size.z.toFixed(3)
        });

        console.log('‚úÖ Validation ho√†n t·∫•t');
        return true;
    }

    console.log('‚ùå Kh√¥ng t√¨m th·∫•y model trong container');
    return false;
};